From 22c8ce6f9b680ab41a76f779a4bba011dd5c43bf Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 15 Oct 2014 10:29:54 +0800
Subject: [PATCH] bfs: Refactor online_cpus() checking in try_preempt().

---
 kernel/sched/bfs.c | 23 +----------------------
 1 file changed, 1 insertion(+), 22 deletions(-)

Index: linux-semplice-3.19.3/kernel/sched/bfs.c
===================================================================
--- linux-semplice-3.19.3.orig/kernel/sched/bfs.c
+++ linux-semplice-3.19.3/kernel/sched/bfs.c
@@ -1317,25 +1317,6 @@ can_preempt(struct task_struct *p, int p
 }
 
 #ifdef CONFIG_SMP
-#define cpu_online_map		(*(cpumask_t *)cpu_online_mask)
-#ifdef CONFIG_HOTPLUG_CPU
-/*
- * Check to see if there is a task that is affined only to offline CPUs but
- * still wants runtime. This happens to kernel threads during suspend/halt and
- * disabling of CPUs.
- */
-static inline bool online_cpus(struct task_struct *p)
-{
-	return (likely(cpus_intersects(cpu_online_map, p->cpus_allowed)));
-}
-#else /* CONFIG_HOTPLUG_CPU */
-/* All available CPUs are always online without hotplug. */
-static inline bool online_cpus(struct task_struct *p)
-{
-	return true;
-}
-#endif
-
 /*
  * Check to see if p can run on cpu, and if not, whether there are any online
  * CPUs it can run on instead.
@@ -1371,9 +1352,7 @@ static void try_preempt(struct task_stru
 	if (p->policy == SCHED_IDLEPRIO)
 		return;
 
-	if (likely(online_cpus(p)))
-		cpus_and(tmp, cpu_online_map, p->cpus_allowed);
-	else
+	if (unlikely(!cpumask_and(&tmp, cpu_online_mask, &p->cpus_allowed)))
 		return;
 
 	highest_prio = latest_deadline = 0;
